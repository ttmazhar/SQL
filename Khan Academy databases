--Create fashion store database
CREATE TABLE store (id INTEGER PRIMARY KEY, item TEXT, quantity INTEGER, sold INTEGER, price INTEGER);

INSERT INTO store VALUES (1, "pants", 10, 7, 1);
INSERT INTO store VALUES (2, "shirts", 20, 19, 5);
INSERT INTO store VALUES (3, "skirts", 5, 7, 8);
INSERT INTO store VALUES (4, "shorts", 15, 10, 6);
INSERT INTO store VALUES (5, "hats", 25, 15, 9);
INSERT INTO store VALUES (6, "jackets", 19, 5, 28);


--Display the database oredered by price.
  SELECT * FROM store
  ORDER BY price asc
  ;

--Find out how many items are sold.
  SELECT SUM(sold) FROM store
  ;

--Select all the song titles.
  SELECT title FROM songs
  ;

--Add another SELECT that uses OR to show the titles of the songs that have an 'epic' mood or a release date after 1990.
  SELECT title FROM songs
  WHERE mood="epic" OR released > 1990
  ;

--Add another SELECT that uses AND to show the titles of songs that are 'epic', and released after 1990, and less than 4 minutes long.
Note that the duration column is measured in seconds.
  WHERE mood="epic"AND released > 1990 AND duration < 240
  ;

--Select the title of all the songs by the artist named 'Queen'.
  SELECT title FROM songs WHERE artist="Queen"
  ;

--Select the name of all of the artists from the 'Pop' genre.
  SELECT name from artists where genre='Pop'
  ;

--Select the title of all the songs from the 'Pop' artists.
  SELECT title FROM songs 
  WHERE artist IN (SELECT name FROM artists WHERE genre ='Pop')
  ;
 
--Select all the authors who have written more than 1 million words.
  SELECT author, SUM(words) AS total_words FROM books
  GROUP BY author
  HAVING total_words > 1000000
  ;
  
--Select all the authors that write more than an average of 150,000 words per book.
Your results table should include the 'author' and average words as an 'avg_words' column.
  SELECT author, AVG(words) AS avg_words FROM books
  GROUP BY author
  HAVING avg_words > 150000
  ;
    
--Select all of the rows, and display the name, number_grade, and percent_completed,
which you can compute by multiplying and rounding the fraction_completed column.
  SELECT name, number_grade, ROUND (fraction_completed*100) AS percent_completed FROM student_grades
  ;

--The goal is a table that shows how many students have earned which letter_grade.
  SELECT COUNT(*),
   CASE
   WHEN number_grade > 90 THEN 'A'
   WHEN number_grade > 80 THEN 'B'
   WHEN number_grade > 70 THEN 'C'
   ELSE 'F'
   END as 'letter_grade'
  FROM student_grades
  GROUP BY letter_grade
  ;

--Select everything from the table topmovies limiting 20.
  SELECT * FROM topmovies
  LIMIT 20
  ;

--Select Title and average 'Worldwide' row as 'avg_worldwide' which is grouped by Title and is more than 2000.
  SELECT Title, AVG(Worldwide) AS 'avg_worldwide' FROM topmovies
  GROUP BY Title
  HAVING avg_worldwide > 2000
  ;

--Select all the studios with MIN domestic number.
  SELECT Studio, MIN(Domestic) AS min_domestic
  FROM topmovies
  GROUP BY Studio
  ;
  
--Select the movie title that is in max in Rank.
  SELECT Title, MAX(Rank) AS max_rank
  FROM topmovies
  ;
  
--Select titles that have WB studio, ordered by their rank.
  SELECT Rank, Title, Studio FROM topmovies
  GROUP BY Title
  HAVING Studio='WB'
  ORDER BY Rank
  ;

--Select all ranks and titles and add a row 'movies_grades' with Overseas values.
'A' for more than 1500, 'B' for more than 1000, 'C' for more than 500 and rest of them 'D'.
  SELECT Rank, Title, Overseas
    CASE
      WHEN Overseas > 1500 THEN 'A'
      WHEN Overseas > 1000 THEN 'B'
      WHEN Overseas > 500 THEN 'C'
      ELSE 'D'
   END as 'movie_grade'
FROM topmovies
;

--Select titles showing that are in Fox Studiio and ranked in top 50.
  SELECT Rank, Title FROM topmovies
  WHERE Studio='Fox' AND Rank <50
  ;
  
--Select titles that are with WB studio or released after 2005, showing recent titles first.
  SELECT Rank, Title, Year FROM topmovies
  WHERE Studio='WB' OR Year > 2005
  ORDER BY Year DESC
  ;


--Insert one more row in persons and then one more row in hobbies that is related to the newly inserted person.
  INSERT INTO persons (name, age) VALUES ("Nancy", 30);
  
  INSERT INTO hobbies (person_id, name) VALUES (5, "walking");

--Select the 2 tables with a join so that you can see each person's name next to their hobby.
  SELECT p.name, h.name
  FROM persons AS p
  JOIN hobbies AS h
  ON p.id=h.person_id
  ;
  
--Add an additional query that shows only the name and hobbies of 'Bobby McBobbyFace', using JOIN combined with WHERE.
  select p.name,h.name
  from persons p
  join hobbies h
  on p.id=h.person_id
  WHERE p.name='Bobby McBobbyFace'
  ;

--Come up with a query that lists the name and email of every customer followed by the item and price of orders they've made.
  SELECT c.name, c.email, o.item, o.price
  FROM customers c
  LEFT OUTER JOIN orders o
  ON c.id=o.customer_id
  ;
    
 --Create another query that will result in one row per each customer, with their name, email, and total amount of money they've spent on orders.
 Sort the rows according to the total money spent, from the most spent to the least spent.
  SELECT c.name, c.email, sum(o.price) as spent
  FROM customers c
  LEFT OUTER JOIN orders o
  ON c.id=o.customer_id
  GROUP BY c.name
  ORDER BY spent desc
  ;
  
--Issue a SELECT that will show the title of each movie next to its sequel's title (or NULL if it doesn't have a sequel).
  SELECT movies.title, sequels.title
  FROM movies
  LEFT OUTER JOIN movies sequels
  ON movies.sequel_id=sequels.id
  ;
  
--Use a JOIN to display a table showing people's names with their hobbies.
  SELECT p.fullname, h.name
  FROM persons p
  JOIN hobbies h
  ON p.id=h.person_id
  ;
  
--Show the names of each pair of friends, based on the data in the friends table.
  SELECT a.fullname, b.fullname
  FROM friends
  JOIN persons a
  ON a.id=friends.person1_id
  JOIN persons b
  ON b.id=friends.person2_id
  ;
  
--Make your own table with some small set of “famous people”, then make more tables about things they do and join those to create nice human readable lists.
  CREATE TABLE famous (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       name TEXT,
                       occupation TEXT,
                       movies TEXT,
                       debut_year INTEGER,
                       marriedto_id INTEGER);

  INSERT INTO famous VALUES (1, "Blake Lively", "Actress", "Gossip Girl", 2014, 2);
  INSERT INTO famous VALUES (2, "Ryan Reynolds", "Actor", "Ordinary Magic", 1993, 1);
  INSERT INTO famous VALUES (3, "Jennifer Lopez", "Singer/Actress", "My Little Girl", 1986, 4);
  INSERT INTO famous VALUES (4, "Alex Rodrigez", "Sportsman", "Texas Rangers", 2001, 3);
  INSERT INTO famous VALUES (5, "John Legend", "Singer", NULL, 2005, 6);
  INSERT INTO famous VALUES (6, "Chrissy Teigen", "Model", NULL, 2010, 5);
  INSERT INTO famous VALUES (7, "Emily Blunt", "Actress", "The Royal Family", 2001, 8);
  INSERT INTO famous VALUES (8, "John Krasinski", "Actor", "Ben", 2002, 7)
  ;
  
--Make anothe table with more information with table name "celebrity".
  CREATE TABLE celebrity (id INTEGER PRIMARY KEY,
                        total_movies INTEGER, 
                        married_year INTEGER,
                        spouse_id INTEGER,
                        latest_release TEXT, 
                        last_release_year INTEGER,
                        most_popular TEXT);

  INSERT INTO celebrity VALUES (1, 20, 2012, 2, "Seconds", 2022, "Accepted");
  INSERT INTO celebrity VALUES (2, 15, 2012, 1, "Free Guy", 2021, "Deadpool");
  INSERT INTO celebrity VALUES (3, 17, 2019, 4, "Enough", 2002, "Parker");
  INSERT INTO celebrity VALUES (4, 26, 2019, 3, NULL, NULL, NULL);
  INSERT INTO celebrity VALUES (5, 50, 2013, 6, "Eighth Studio", 2022, "All of me");
  INSERT INTO celebrity VALUES (6, 19, 2013, 5, "Lip Sync Battle", 2022, "Chrissy's Court");
  INSERT INTO celebrity VALUES (7, 11, 2010, 8, "A Quiet Place Part II", 2021, "Sicario")
  ;
  
--Show both spouses' name.
  SELECT a.name, b.name
  FROM famous a
  LEFT JOIN famous b
  ON a.id=b.marriedto_id
  ;
  
--Use UPDATE to change the author to 'Jackie Draper' for all rows where it's currently 'Jackie Paper'.
  UPDATE documents SET author = 'Jackie Draper' WHERE author = 'Jackie Paper';
  
--Delete the row where the title is 'Things I'm Afraid Of'. Then re-select all the rows to make sure the table changed like you expected.
  DELETE FROM documents WHERE title = "Things I'm Afraid Of";
  SELECT * FROM documents;


--Use ALTER to add a 'price' column to the table.
  ALTER TABLE clothes ADD price INTEGER;
  
  
--Now assign each item a price, using UPDATE - item 1 should be 10 dollars, item 2 should be 20 dollars, item 3 should be 30 dollars.
  UPDATE clothes SET price = 10 WHERE id = 1;
  UPDATE clothes SET price = 20 WHERE id = 2;
  UPDATE clothes SET price = 30 WHERE id = 3;


--Now insert a new item into the table that has all three attributes filled in, including 'price'.
  INSERT INTO clothes (type, design, price)
   VALUES ("pant", "black", 40);


--CREATE a table to store the data.
INSERT a few example rows in the table.
Use an UPDATE to emulate what happens when you edit data in the app.
Use a DELETE to emulate what happens when you delete data in the app.

  /* What does the app's SQL look like? */

CREATE TABLE cloth_store (id integer Primary Key,
                          item text,
                          quantity integer,
                          price integer,
                          repurchased text);
                          
                        
INSERT INTO cloth_store (id, item, quantity, price, repurchased) VALUES (1, "shirt", 5, 10, "yes");

INSERT INTO cloth_store (id, item, quantity, price, repurchased) VALUES (2, "pant", 10, 20, "no");

INSERT INTO cloth_store (id, item, quantity, price, repurchased) VALUES (3, "jeans", 30, 40, "no");

UPDATE cloth_store SET item = "denim" WHERE id = 3;

DELETE FROM cloth_store WHERE id = 3;

SELECT * FROM cloth_store;




