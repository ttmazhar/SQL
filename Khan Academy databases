--Create fashion store database
CREATE TABLE store (id INTEGER PRIMARY KEY, item TEXT, quantity INTEGER, sold INTEGER, price INTEGER);

INSERT INTO store VALUES (1, "pants", 10, 7, 1);
INSERT INTO store VALUES (2, "shirts", 20, 19, 5);
INSERT INTO store VALUES (3, "skirts", 5, 7, 8);
INSERT INTO store VALUES (4, "shorts", 15, 10, 6);
INSERT INTO store VALUES (5, "hats", 25, 15, 9);
INSERT INTO store VALUES (6, "jackets", 19, 5, 28);


--Display the database oredered by price.
  SELECT * FROM store
  ORDER BY price asc
  ;

--Find out how many items are sold.
  SELECT SUM(sold) FROM store
  ;

--Select all the song titles.
  SELECT title FROM songs
  ;

--Add another SELECT that uses OR to show the titles of the songs that have an 'epic' mood or a release date after 1990.
  SELECT title FROM songs
  WHERE mood="epic" OR released > 1990
  ;

--Add another SELECT that uses AND to show the titles of songs that are 'epic', and released after 1990, and less than 4 minutes long.
Note that the duration column is measured in seconds.
  WHERE mood="epic"AND released > 1990 AND duration < 240
  ;

--Select the title of all the songs by the artist named 'Queen'.
  SELECT title FROM songs WHERE artist="Queen"
  ;

--Select the name of all of the artists from the 'Pop' genre.
  SELECT name from artists where genre='Pop'
  ;

--Select the title of all the songs from the 'Pop' artists.
  SELECT title FROM songs 
  WHERE artist IN (SELECT name FROM artists WHERE genre ='Pop')
  ;
 
--Select all the authors who have written more than 1 million words.
  SELECT author, SUM(words) AS total_words FROM books
  GROUP BY author
  HAVING total_words > 1000000
  ;
  
--Select all the authors that write more than an average of 150,000 words per book.
Your results table should include the 'author' and average words as an 'avg_words' column.
  SELECT author, AVG(words) AS avg_words FROM books
  GROUP BY author
  HAVING avg_words > 150000
  ;
    
--Select all of the rows, and display the name, number_grade, and percent_completed,
which you can compute by multiplying and rounding the fraction_completed column.
  SELECT name, number_grade, ROUND (fraction_completed*100) AS percent_completed FROM student_grades
  ;

--The goal is a table that shows how many students have earned which letter_grade.
  SELECT COUNT(*),
   CASE
   WHEN number_grade > 90 THEN 'A'
   WHEN number_grade > 80 THEN 'B'
   WHEN number_grade > 70 THEN 'C'
   ELSE 'F'
   END as 'letter_grade'
  FROM student_grades
  GROUP BY letter_grade
  ;

--Select everything from the table topmovies limiting 20.
  SELECT * FROM topmovies
  LIMIT 20
  ;


--Select Title and average 'Worldwide' row as 'avg_worldwide' which is grouped by Title and is more than 2000.
  SELECT Title, AVG(Worldwide) AS 'avg_worldwide' FROM topmovies
  GROUP BY Title
  HAVING avg_worldwide > 2000
  ;


